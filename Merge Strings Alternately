// https://neetcode.io/problems/merge-strings-alternately?list=neetcode250


//Two Pointer Approach
//O(n+m)time complexity
//O(n+m)space complexity
class Solution {
    mergeAlternately(word1, word2) {
        let w1=0,w2=0,res="",check='w1';
        let n=word1.length,m=word2.length;
        while(w1<n && w2<m){
                if(check==='w1'){
                    res+=word1[w1++];
                    check='w2';
                }
                else{
                    res+=word2[w2++];
                    check='w1';
                }
        }
        while(w1<n){
            res+=word1[w1++];
                    // check='w2';
        }
        while(w2<m){
             res+=word2[w2++];
                    // check='w1';
        } return res;
    }
   
}



//One pointer

class Solution {
    /**
     * @param {string} word1
     * @param {string} word2
     * @return {string}
     */
    mergeAlternately(word1, word2) {
        const n = word1.length, m = word2.length;
        const res = [];
        for (let i = 0; i < m || i < n; i++) {
            if (i < n) {
                res.push(word1.charAt(i));
            }
            if (i < m) {
                res.push(word2.charAt(i));
            }
        }
        return res.join("");
    }
}
