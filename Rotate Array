// https://neetcode.io/problems/rotate-array?list=neetcode250
// Time coplexity O(n)
// Space complexity O(n)
class Solution {
    /**
     * @param {number[]} nums
     * @param {number} k
     * @return {void} Do not return anything, modify nums in-place instead.
     */
    rotate(nums, k) {
        let result=[];
        let n=nums.length;
        if(n ===0 || k===0){
            return;
        }
        while(k>n){k=k-n;}
        for(let i=n-k;i<n;i++){
            result.push(nums[i]);
        }
        for(let i=0;i<n-k;i++){
            result.push(nums[i]);
        }
        for(let i=0;i<result.length;i++){
            nums[i]=result[i];
        }
    }
}







// O(N) Time Complexity & O(1) Space complexity
class Solution {
    /**
     * @param {number[]} nums
     * @param {number} k
     * @return {void} Do not return anything, modify nums in-place instead.
     */
    rotate(nums, k) {
        const n = nums.length;
        k %= n;

        const reverse = (l, r) => {
            while (l < r) {
                [nums[l], nums[r]] = [nums[r], nums[l]];
                l++;
                r--;
            }
        };

        reverse(0, n - 1);
        reverse(0, k - 1);
        reverse(k, n - 1);
    }
}

// Test case
// nums = [1,2,3,4,5,6,7,8], k = 4



// 8,7,6,5,4,3,2,1
//5,6,7,8,4,3,2,1
//5,6,7,81,2,3,4
