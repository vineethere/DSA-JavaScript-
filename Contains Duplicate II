// https://neetcode.io/problems/contains-duplicate-ii?list=neetcode250

//time complexity O(n^2)
// space complexity O(1)
// brute force
class Solution {
    /**
     * @param {number[]} nums
     * @param {number} k
     * @return {boolean}
     */
    containsNearbyDuplicate(nums, k) {
        if(k===0 || nums.length===0){
            return false;
        }
        for(let i=0;i<nums.length;i++){
            for(let j=i+1;j<nums.length;j++){
                if(j-i <=k && nums[i]===nums[j]){
                    return true;
                }
            }
        }
        return false;
    }
}



//time complexity O(N)
//space compexity O(1)
class Solution {
    containsNearbyDuplicate(nums, k) {
        let storedData={};
        let n=nums.length;
        for(let i=0;i<n;i++){
            if(storedData[nums[i]]!==undefined){console.log("aaya");
                if(i-storedData[nums[i]]<=k){
                    return true;
                }
                else storedData[nums[i]]=i;
            }
            else{
                storedData[nums[i]]=i;
            }
        }
        return false;
        
    }



//SLiding window
//time complexity O(n)
// space complexity O(1)

class Solution {
    containsNearbyDuplicate(nums, k) {
        let window = new Set();

        for (let i = 0; i < nums.length; i++) {
            if (window.has(nums[i])) {
                return true;
            }

            window.add(nums[i]);

            // Keep window size to at most k
            if (window.size > k) {
                window.delete(nums[i - k]);
            }
        }

        return false;
    }
}

