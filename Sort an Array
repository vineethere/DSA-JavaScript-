//https://neetcode.io/problems/sort-an-array?list=neetcode250

// Bubble Sort
class Solution {
    /**
     * @param {number[]} nums
     * @return {number[]}
     */
    sortArray(nums) {
        let n=nums.length;
        for(let i=0;i<n;i++){
            for(let j=0;j<n-i-1;j++){
                if(nums[j] > nums[j+1]){
                    [nums[j],nums[j+1]] = [nums[j+1],nums[j]];
                }
            }
        }
        return nums;
    }
}
Time complexity O(n)
Space complexity O(1) as it is not using any auxillary space


//selection sort
// O(n^2) time complexity O(1)space
class Solution {
    /**
     * @param {number[]} nums
     * @return {number[]}
     */
    sortArray(nums) {
        let n=nums.length;
        for(let i=0;i<n;i++){
          let minElement=nums[i];
          let minIndex=i;
            for(let j=i+1;j<n;j++){
                if(minElement>nums[j]){
                  minElement=nums[j];
                  minIndex=j;
                }
            }
            if(i!==minIndex){
            [nums[i] , nums[minIndex]] = [nums[minIndex] , nums[i]];
            }
        }
        return nums;
    }
}
