//https://neetcode.io/problems/sort-an-array?list=neetcode250

class Solution {
    /**
     * @param {number[]} nums
     * @return {number[]}
     */
    sortArray(nums) {
        function partition(left, right) {
            const mid = (left + right) >> 1;
            [nums[mid], nums[left + 1]] = [nums[left + 1], nums[mid]];
            
            if (nums[left] > nums[right])
                [nums[left], nums[right]] = [nums[right], nums[left]];
            if (nums[left + 1] > nums[right])
                [nums[left + 1], nums[right]] = [nums[right], nums[left + 1]];
            if (nums[left] > nums[left + 1])
                [nums[left], nums[left + 1]] = [nums[left + 1], nums[left]];
            
            const pivot = nums[left + 1];
            let i = left + 1;
            let j = right;
            
            while (true) {
                while (nums[++i] < pivot);
                while (nums[--j] > pivot);
                if (i > j) break;
                [nums[i], nums[j]] = [nums[j], nums[i]];
            }
            
            nums[left + 1] = nums[j];
            nums[j] = pivot;
            return j;
        }
        
        function quickSort(left, right) {
            if (right <= left + 1) {
                if (right == left + 1 && nums[right] < nums[left])
                    [nums[left], nums[right]] = [nums[right], nums[left]];
                return;
            }
            
            const j = partition(left, right);
            quickSort(left, j - 1);
            quickSort(j + 1, right);
        }
        
        quickSort(0, nums.length - 1);
        return nums;
    }
}








// 2. Merge Sort


class Solution {
    /**
     * @param {number[]} nums
     * @return {number[]}
     */
    sortArray(nums) {
        this.mergeSort(nums, 0, nums.length - 1);
        return nums;
    }

    /**
    * @param {number[]} arr
    * @param {number} l
    * @param {number} r
    * @return {void}
    */
    mergeSort(arr, l, r) {
        if (l >= r) return;
        let m = Math.floor((l + r) / 2);
        this.mergeSort(arr, l, m);
        this.mergeSort(arr, m + 1, r);
        this.merge(arr, l, m, r);
    }

    /**
    * @param {number[]} arr
    * @param {number} l
    * @param {number} m
    * @param {number} r
    * @return {void}
    */
    merge(arr, l, m, r) {
        let temp = [];
        let i = l, j = m + 1;

        while (i <= m && j <= r) {
            if (arr[i] <= arr[j]) {
                temp.push(arr[i++]);
            } else {
                temp.push(arr[j++]);
            }
        }

        while (i <= m) temp.push(arr[i++]);
        while (j <= r) temp.push(arr[j++]);

        for (let i = l; i <= r; i++) {
            arr[i] = temp[i - l];
        }
    }
}
