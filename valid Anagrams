// https://neetcode.io/problems/is-anagram?list=neetcode250


// O(n)time and O(n)space

class Solution {
    isAnagram(s, t) {
        if(s.length !== t.length){
            return false;
        }
        const maps={};
        s.split('').forEach((item,index)=>{
            if(!maps[item]){
                maps[item]=1;
            }else maps[item]++;
        })
        t.split('').forEach((item,index)=>{
            if(maps[item]>0){
                maps[item]--;
            }
        })

         for(const key in maps){
            if(maps[key]!==0)return false;
         }
         
        return true;
    }
}

//More Optimised:
O(n+m)time and O(1)space


class Solution {
    isAnagram(s, t) {
        if(s.length !== t.length){
            return false
        }
        const arr = Array(26).fill(0);
        for(let i=0;i<s.length;i++){
             arr[s.charCodeAt(i) - 'a'.charCodeAt(0)]++;
        }
        for(let i=0;i<t.length;i++){
             arr[t.charCodeAt(i) - 'a'.charCodeAt(0)]--;
        }
        for(let i=0;i<arr.length;i++){
            if(arr[i]!== 0){
                return false;
            }
        }
        return true;
    }
}
