// https://neetcode.io/problems/4sum?list=neetcode250

// O(n^4) time complexity
class Solution {
    /**
     * @param {number[]} nums
     * @param {number} target
     * @return {number[][]}
     */
    fourSum(nums, target) {
        let n=nums.length;
        let res = [];
        let seen=new Set();
        nums.sort((a,b)=>a-b);
        for(let i=0;i<n;i++){
            for(let j=i+1;j<n;j++){
                for(let k =j+1;k<n;k++){
                    for(let l=k+1;l<n;l++){
                        if(nums[i]+nums[j]+nums[k]+nums[l] === target){
                            let tempArr=[nums[i],nums[j],nums[k],nums[l]].join(',');
                            if(!seen.has(tempArr)){
                                seen.add(tempArr);
                                res.push([nums[i],nums[j],nums[k],nums[l]]);
                            }
                        }
                    }
                }
            }
        }
        return res;
    }
}








// 4 pointers

class Solution {
    /**
     * @param {number[]} nums
     * @param {number} target
     * @return {number[][]}
     */
    fourSum(nums, target) {
        nums.sort((a, b) => a - b);
        const res = [];
        const n = nums.length;

        for (let i = 0; i < n; i++) {
            if (i > 0 && nums[i] === nums[i - 1]) continue;

            for (let j = i + 1; j < n; j++) {
                if (j > i + 1 && nums[j] === nums[j - 1]) continue;

                let left = j + 1, right = n - 1;
                while (left < right) {
                    const sum = nums[i] + nums[j] + nums[left] + nums[right];
                    if (sum === target) {
                        res.push([nums[i], nums[j], nums[left], nums[right]]);
                        left++;
                        right--;
                        while (left < right && nums[left] === nums[left - 1]) left++;
                        while (left < right && nums[right] === nums[right + 1]) right--;
                    } else if (sum < target) {
                        left++;
                    } else {
                        right--;
                    }
                }
            }
        }

        return res;
    }
}
